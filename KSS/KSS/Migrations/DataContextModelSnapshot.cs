// <auto-generated />
using System;
using KSS.Areas.Admin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KSS.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KSS.Areas.Admin.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BookAvailable");

                    b.Property<decimal>("BookPrice");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("PrereqId");

                    b.Property<int>("TypicalPrice");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PrereqId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BookBought");

                    b.Property<bool>("Confirmed");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("Paid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("UserId");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("InstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.Instance", b =>
                {
                    b.Property<int>("InstanceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BookAvailable");

                    b.Property<double>("BookPrice");

                    b.Property<int>("CourseId");

                    b.Property<int>("InstructorId");

                    b.Property<int>("LocationId");

                    b.Property<double>("Price");

                    b.Property<int>("Seats");

                    b.Property<DateTimeOffset>("StartDate");

                    b.HasKey("InstanceId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Instance");
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<int>("Zipcode");

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio");

                    b.Property<string>("Picture");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("Role");

                    b.Property<byte[]>("Salt");

                    b.Property<int?>("StaffId");

                    b.HasKey("UserId");

                    b.HasIndex("StaffId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = 1, Email = "admin@admin.com", FirstName = "Becky", LastName = "Smith", Password = "nbCzv5aYMu08N7oIYJIoj7pLFyG3hdlZ838eQdt5y9s=", Phone = "1112223333", Role = "Admin", Salt = new byte[] { 137, 20, 241, 106, 216, 35, 38, 146, 84, 167, 240, 121, 121, 19, 5, 12 } },
                        new { UserId = 2, Email = "student1@student.com", FirstName = "Paul", LastName = "Dig", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 3, Email = "student2@student.com", FirstName = "Mike", LastName = "Waters", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 4, Email = "student3@student.com", FirstName = "Russel", LastName = "Chavers", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 5, Email = "student4@student.com", FirstName = "Sharon", LastName = "Manino", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 6, Email = "student5@student.com", FirstName = "Amy", LastName = "Hillbond", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 7, Email = "student6@student.com", FirstName = "Bill", LastName = "Everet", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 8, Email = "student7@student.com", FirstName = "Trenton", LastName = "Hillsong", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 9, Email = "student8@student.com", FirstName = "Colin", LastName = "Livers", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 10, Email = "student9@student.com", FirstName = "Babe", LastName = "Ruth", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 11, Email = "student10@student.com", FirstName = "Tim", LastName = "Hammond", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 12, Email = "student11@student.com", FirstName = "Gary", LastName = "Aimes", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 13, Email = "student12@student.com", FirstName = "Lucy", LastName = "Vilardo", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 14, Email = "student13@student.com", FirstName = "Tom", LastName = "Avers", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 15, Email = "student14@student.com", FirstName = "Amanda", LastName = "Catalonato", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 16, Email = "student15@student.com", FirstName = "Donald", LastName = "Hill", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } },
                        new { UserId = 17, Email = "student16@student.com", FirstName = "Richard", LastName = "Newman", Password = "DKgwuomqUjKkKSsWtB3RuaOFc836RSLQoLUNCsIKR0s=", Phone = "1112223333", Role = "User", Salt = new byte[] { 184, 23, 64, 221, 55, 162, 65, 47, 246, 122, 96, 223, 236, 239, 126, 112 } }
                    );
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.Course", b =>
                {
                    b.HasOne("KSS.Areas.Admin.Models.Category", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KSS.Areas.Admin.Models.Course", "Prereq")
                        .WithMany("Courses")
                        .HasForeignKey("PrereqId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.Enrollment", b =>
                {
                    b.HasOne("KSS.Areas.Admin.Models.Instance", "Instance")
                        .WithMany("Enrollments")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KSS.Areas.Admin.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.Instance", b =>
                {
                    b.HasOne("KSS.Areas.Admin.Models.Course", "Course")
                        .WithMany("Instances")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KSS.Areas.Admin.Models.User", "Instructor")
                        .WithMany("Instances")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KSS.Areas.Admin.Models.Location", "Location")
                        .WithMany("Instances")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KSS.Areas.Admin.Models.User", b =>
                {
                    b.HasOne("KSS.Areas.Admin.Models.Staff", "Staff")
                        .WithMany("User")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
